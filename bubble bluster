import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Game Settings
screen_width = 800
screen_height = 600
background_color = (0, 0, 139)  # Dark blue
player_speed = 5
bubble_min_speed = 2
bubble_max_speed = 6
bubble_min_radius = 10
bubble_max_radius = 50
bubble_interval = 1500  # Time interval (ms) for new bubble creation
FPS = 30  # Frame rate

# Create the game window
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Bubble Bluster')

# Player settings (red rectangle at the top-left corner)
player_image = pygame.Surface((50, 50))  # Red rectangle for player
player_image.fill((255, 0, 0))  # Fill the player rectangle with red
player_rect = player_image.get_rect()
player_rect.topleft = (0, 0)

# Define bubbles (white circles with transparency inside)
bubbles = []
pygame.time.set_timer(pygame.USEREVENT, bubble_interval)

# Font settings for the score
font = pygame.font.SysFont(None, 46)
score = 0

# Play button settings
button_width = 200
button_height = 50
button_color = (255, 0, 0)
button_text_color = (255, 255, 255)
button_rect = pygame.Rect((screen_width // 2 - button_width // 2, screen_height // 2 - button_height // 2), (button_width, button_height))
button_font = pygame.font.SysFont(None, 46)
button_text = button_font.render("Play", True, button_text_color)

# Game states
game_active = False

# Function to create a new bubble with random radius, speed, and starting position
def create_bubble():
    radius = random.randint(bubble_min_radius, bubble_max_radius)
    base_speed = random.randint(bubble_min_speed, bubble_max_speed)
    
    # Speed scaling based on score
    speed_multiplier = 1 + score / 100  # Speed increases with score
    bubble_speed = int(base_speed * speed_multiplier)
    
    bubble_rect = pygame.Rect(screen_width, random.randint(0, screen_height - radius * 2), radius * 2, radius * 2)

    # Create a surface for the bubble with transparency
    bubble_surface = pygame.Surface((radius * 2, radius * 2), pygame.SRCALPHA)

    # Draw the bubble as a white circle outline (transparent inside)
    pygame.draw.circle(bubble_surface, (255, 255, 255), (radius, radius), radius, 2)  # Only draw the border with thickness 2

    return bubble_surface, bubble_rect, radius, bubble_speed

# Function to move the bubbles leftwards across the screen
def move_bubbles():
    for i in range(len(bubbles)):
        bubble_surface, bubble_rect, radius, speed = bubbles[i]
        bubble_rect.x -= speed
        bubbles[i] = (bubble_surface, bubble_rect, radius, speed)

# Function to check for collisions and update score
def check_collision():
    global bubbles, score
    for bubble in bubbles:
        bubble_surface, bubble_rect, radius, speed = bubble
        if player_rect.colliderect(bubble_rect):
            score += radius
            bubbles.remove(bubble)

# Function to draw the play button
def draw_play_button():
    pygame.draw.rect(screen, button_color, button_rect)
    screen.blit(button_text, (button_rect.centerx - button_text.get_width() // 2, button_rect.centery - button_text.get_height() // 2))

# Main game loop
clock = pygame.time.Clock()
running = True
while running:
    # Check for events (like quit or mouse click)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.USEREVENT and game_active:
            bubbles.append(create_bubble())
        if event.type == pygame.MOUSEBUTTONDOWN and not game_active:
            if button_rect.collidepoint(event.pos):
                game_active = True

    # If the game is active, player can move and bubbles appear
    if game_active:
        # Movement logic for the player (red rectangle)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and player_rect.left > 0:
            player_rect.x -= player_speed
        if keys[pygame.K_RIGHT] and player_rect.right < screen_width:
            player_rect.x += player_speed
        if keys[pygame.K_UP] and player_rect.top > 0:
            player_rect.y -= player_speed
        if keys[pygame.K_DOWN] and player_rect.bottom < screen_height:
            player_rect.y += player_speed

        # Move the bubbles
        move_bubbles()

        # Check for collisions (remove bubbles and update score when the player hits them)
        check_collision()

        # Remove bubbles that are off the screen
        bubbles = [bubble for bubble in bubbles if bubble[1].right > 0]

    # Fill the background with the color
    screen.fill(background_color)

    # Draw the player (red rectangle)
    if game_active:
        screen.blit(player_image, player_rect)

        # Draw the bubbles (white outlined circles)
        for bubble_surface, bubble_rect, radius, speed in bubbles:
            screen.blit(bubble_surface, bubble_rect)

        # Display the score in the top-right corner
        score_text = font.render(f"Score: {score}", True, (255, 255, 255))
        screen.blit(score_text, (screen_width - score_text.get_width() - 20, 20))

    # Draw the play button if the game is not active
    if not game_active:
        draw_play_button()

    # Update the display
    pygame.display.flip()

    # Maintain the frame rate
    clock.tick(FPS)

# Quit the game
pygame.quit()
sys.exit()
